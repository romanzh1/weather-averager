package message

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/romanzh1/weather-averager/pkg/api"
)

func SendResponse(updates tgbotapi.UpdatesChannel, bot *tgbotapi.BotAPI) error {
	percent := "%"
	var err error
	// TODO optimize the number of if constructs and create methods for repeated code
	// TODO add notification functionality
	// TODO message design (clouds, amount of information)
	for update := range updates {
		if update.Message == nil { // ignore any non-Message Updates
			continue
		}
		message := update.Message.Text
		reply := "–ù–µ –∑–Ω–∞—é, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—åüßê–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É"
		if message == "" {
			reply = "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç‚òùÔ∏è"
		}

		if strings.Contains(message, "—Å–µ–π—á–∞—Å") {
			locality := strings.Fields(message)
			dataWeather, err := api.GetWeatherNow(locality[0]) // TODO make any order
			if err != nil {
				fmt.Println(err)
			}
			reply = fmt.Sprintf("–°–µ–π—á–∞—Å %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞‚õÖ. –í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å, %s",
				dataWeather.Main.Temp, dataWeather.Main.FeelsLike, dataWeather.Main.Humidity, percent,
				dataWeather.Wind.Speed, dataWeather.Weather[0].Description) //TODO change the sprintf to something else
		}

		if strings.Contains(message, "—Å–µ–≥–æ–¥–Ω—è") {
			message := strings.Fields(message)
			dataWeather, err := api.GetWeatherByHour(message[0]) // TODO send weather emoji
			if err != nil {
				fmt.Println(err)
			}

			reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ 12 —á–∞—Å–æ–≤: " //TODO add a response with a proposal to send a weather forecast for another 12 hours

			for i := 0; i < 12; i++ {
				reply += fmt.Sprintf("\n\n%s %.1f¬∞ –≥—Ä–∞–¥—É—Å–æ–≤, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å, %s‚õÖ–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s",
					time.Unix(dataWeather.Hourly[i].Dt+10800, 0).Format("15:04"), dataWeather.Hourly[i].Temp, dataWeather.Hourly[i].FeelsLike, dataWeather.Hourly[i].Humidity,
					percent, dataWeather.Hourly[i].WindSpeed, dataWeather.Hourly[i].Weather[0].Description, dataWeather.Hourly[i].Pop*100, percent)
			}
			if err != nil {
				fmt.Println(err)
			}
		}

		if strings.Contains(message, "–∑–∞–≤—Ç—Ä–∞") {
			message := strings.Fields(message)
			dataWeather, err := api.GetWeatherByHour(message[0]) // TODO send weather emoji
			if err != nil {
				fmt.Println(err)
			}
			reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ 12 —á–∞—Å–æ–≤ –∑–∞–≤—Ç—Ä–∞: " //TODO add a response with a proposal to send a weather forecast for another 12 hours

			tomorrow := time.Now().AddDate(0, 0, 1)
			var dateLayout = "02-01-2006"
			midnight, _ := time.Parse(dateLayout, tomorrow.Format(dateLayout))
			midnightUnix := midnight.Unix() // TODO make time zone
			var indTomor int
			for i := 0; i < 48; i++ {
				if dataWeather.Hourly[i].Dt == midnightUnix {
					indTomor = i
				}
			}

			for i := indTomor; i < indTomor+12; i++ {
				reply += fmt.Sprintf("\n\n%s %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å, %s‚õÖ–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s",
					time.Unix(dataWeather.Hourly[i].Dt, 0).Format("15:04"), dataWeather.Hourly[i].Temp, dataWeather.Hourly[i].FeelsLike, dataWeather.Hourly[i].Humidity,
					percent, dataWeather.Hourly[i].WindSpeed, dataWeather.Hourly[i].Weather[0].Description, dataWeather.Hourly[i].Pop*100, percent)
			}
			if err != nil {
				fmt.Println(err)
			}
		}

		if strings.Contains(message, " –Ω–∞ ") {
			message := strings.Fields(message)
			dataWeather, err := api.GetWeatherByHour(message[0]) // TODO send weather emoji
			if err != nil {
				fmt.Println(err)
			}
			numberHours, err := strconv.Atoi(message[2])
			if err != nil {
				fmt.Println(err)
			}
			reply = fmt.Sprintf("–ü–æ–≥–æ–¥–∞ –Ω–∞ %d —á–∞—Å–æ–≤", numberHours)

			for i := 0; i < numberHours; i++ {
				reply += fmt.Sprintf("\n\n%s %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å, %s‚õÖ–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s",
					time.Unix(dataWeather.Hourly[i].Dt+10800, 0).Format("15:04"), dataWeather.Hourly[i].Temp, dataWeather.Hourly[i].FeelsLike, dataWeather.Hourly[i].Humidity,
					percent, dataWeather.Hourly[i].WindSpeed, dataWeather.Hourly[i].Weather[0].Description, dataWeather.Hourly[i].Pop*100, percent)
			}
			if err != nil {
				fmt.Println(err)
			}
		}

		if strings.Contains(message, " –¥–Ω—è") || strings.Contains(message, " –¥–Ω–µ–π") ||
			strings.Contains(message, " –¥–µ–Ω—å") ||
			strings.Contains(message, "–Ω–µ–¥–µ–ª—è") || strings.Contains(message, "–Ω–µ–¥–µ–ª—é") {
			partMessage := strings.Fields(message)
			dataWeather, err := api.GetWeatherByHour(partMessage[0]) // TODO send weather emoji
			if err != nil {
				fmt.Println(err)
			}

			var numDays int
			if strings.Contains(message, "–Ω–µ–¥–µ–ª—è") || strings.Contains(message, "–Ω–µ–¥–µ–ª—é") {
				reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é: "
				numDays = len(dataWeather.Daily)
			} else {
				if strings.Contains(message, " –¥–Ω—è") {
					reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + partMessage[1] + " –¥–Ω—è:"
				}
				if strings.Contains(message, " –¥–Ω–µ–π") {
					reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + partMessage[1] + " –¥–Ω–µ–π:"
				}
				if strings.Contains(message, " –¥–µ–Ω—å") {
					reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + partMessage[1] + " –¥–µ–Ω—å:"
				}

				numDays, err = strconv.Atoi(partMessage[1])
				if err != nil {
					fmt.Println(err)
				}
				if numDays > 7 {
					numDays = 7
				}
			}

			days := [7]string{"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
			for i := 0; i < numDays; i++ {
				day := days[time.Unix(dataWeather.Daily[i].Dt, 0).Weekday()]

				reply += fmt.Sprintf("\n\n%s\n–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è: —É—Ç—Ä–æ–º %.1f¬∞, –¥–Ω—ë–º %.1f¬∞, –≤–µ—á–µ—Ä–æ–º %.1f¬∞, –Ω–æ—á—å—é %.1f¬∞"+
					"\n–ü–æ –æ—â—É—â–µ–Ω–∏—è–º: —É—Ç—Ä–æ–º %.1f¬∞, –¥–Ω—ë–º %.1f¬∞, –≤–µ—á–µ—Ä–æ–º %.1f¬∞, –Ω–æ—á—å—é %.1f¬∞."+
					"\n–í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å, %s‚õÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s",
					day, dataWeather.Daily[i].Temp.Morn, dataWeather.Daily[i].Temp.Day, dataWeather.Daily[i].Temp.Eve, dataWeather.Daily[i].Temp.Night,
					dataWeather.Daily[i].FeelsLike.Morn, dataWeather.Daily[i].FeelsLike.Day, dataWeather.Daily[i].FeelsLike.Eve, dataWeather.Daily[i].FeelsLike.Night, dataWeather.Daily[i].Humidity,
					percent, dataWeather.Daily[i].WindSpeed, dataWeather.Daily[i].Weather[0].Description, dataWeather.Daily[i].Pop*100, percent)
			}
			if err != nil {
				fmt.Println(err)
			}
		}

		// log.Printf("[%s] %s", update.Message.From.UserName, message)

		switch update.Message.Command() {
		case "start":
			reply = "–ü—Ä–∏–≤–µ—Çüñê. –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, —É—Å—Ä–µ–¥–Ω—è—é—â–∏–π –ø–æ–≥–æ–¥—É –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö " +
				"—Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–≥–æ–¥—ã, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–≥–æ.\n" +
				"–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É."
		case "stop":
			reply = "hammer time"
		case "help":
			reply = "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ \"OpenWeatherMap\" " + "–≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ. " +
				"–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n" +
				"	‚Ä¢ –ú–æ–∂–∞–π—Å–∫ —Å–µ–π—á–∞—Å\n" +
				"	‚Ä¢ –¢–≤–µ—Ä—å –Ω–∞ 6 —á–∞—Å–æ–≤\n" +
				"	‚Ä¢ –ú–æ—Å–∫–≤–∞ —Å–µ–≥–æ–¥–Ω—è\n" +
				"	‚Ä¢ –î—É–±–Ω–∞ –∑–∞–≤—Ç—Ä–∞\n" +
				"	‚Ä¢ –ü–µ—Ç–µ—Ä–±—É—Ä–≥ 4 –¥–Ω—è\n" +
				"	‚Ä¢ –¢–µ—Ä–∏–±–µ—Ä–∫–∞ –Ω–µ–¥–µ–ª—è\n" +
				"\n–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞ —Å –µ–∂–µ—á–∞—Å–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º.\n" +
				"–õ–∏–±–æ —É–∫–∞–∂–∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑, –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–ø–ª–æ—Ç—å –¥–æ 48 —á–∞—Å–æ–≤.\n" +
				"–¢–∞–∫–∂–µ, –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –≤–ø–ª–æ—Ç—å –¥–æ 7 –¥–Ω–µ–π.\n" +
				"\n–ü–æ–º–∏–º–æ —Ç–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —è –º–æ–≥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ (–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüë®‚Äçüíª). –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫:\n" +
				"	‚Ä¢ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 12:00\n" +
				"	‚Ä¢ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 15:30 –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è\n" +
				"	‚Ä¢ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 9:00 –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é\n"

		}

		switch message {
		case "–ü—Ä–∏–≤–µ—Ç":
			reply = "–ü—Ä–∏–≤–µ—Çüñê. –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, —É—Å—Ä–µ–¥–Ω—è—é—â–∏–π –ø–æ–≥–æ–¥—É –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö " +
				"—Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–≥–æ–¥—ã, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–≥–æ.\n" +
				"–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É."
		case "hello":
			reply = "worldüòú"
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
		msg.ReplyToMessageID = update.Message.MessageID

		_, err := bot.Send(msg)
		if err != nil {
			fmt.Println(err)
		}
	}
	return err
}
