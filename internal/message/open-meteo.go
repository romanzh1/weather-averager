package message

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/romanzh1/weather-averager/pkg/api/om"
)

func getWeatherOM(message string) string {
	percent := "%"
	reply := ""

	if strings.Contains(message, "—Å–µ–π—á–∞—Å") {
		locality := strings.Fields(message)
		dataWeather, hour, err := om.GetWeatherNow(locality[0]) // TODO make any order
		if err != nil {
			fmt.Println(err)
		}
		return fmt.Sprintf("–°–µ–π—á–∞—Å %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %d%s, %s",
			dataWeather.Hourly.Temperature2M[hour], dataWeather.Hourly.ApparentTemperature[hour], dataWeather.Hourly.Cloudcover[hour], percent,
			dataWeather.Hourly.Windspeed10M[hour], dataWeather.Hourly.Relativehumidity2M[hour], percent, getWeatherOMCondition(dataWeather.Hourly.Weathercode[hour])) //TODO change the sprintf to something else
	}

	if strings.Contains(message, "—Å–µ–≥–æ–¥–Ω—è") {
		message := strings.Fields(message)
		dataWeather, err := om.GetWeatherByHour(message[0])
		if err != nil {
			fmt.Println(err)
		}

		reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ 12 —á–∞—Å–æ–≤: "

		iHour := om.GetCurrentDateAndHour(dataWeather)

		for i := iHour; i < iHour+12; i++ {
			reply += fmt.Sprintf("\n\n%s %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %d%s, %s",
				dataWeather.Hourly.Time[i][11:16], dataWeather.Hourly.Temperature2M[i], dataWeather.Hourly.ApparentTemperature[i], dataWeather.Hourly.Cloudcover[i], percent,
				dataWeather.Hourly.Windspeed10M[i], dataWeather.Hourly.Relativehumidity2M[i], percent, getWeatherOMCondition(dataWeather.Hourly.Weathercode[i]))
		}
		if err != nil {
			fmt.Println(err)
		}

		return reply
	}

	if strings.Contains(message, "–∑–∞–≤—Ç—Ä–∞") {
		message := strings.Fields(message)
		dataWeather, err := om.GetWeatherByHour(message[0])
		if err != nil {
			fmt.Println(err)
		}
		reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ 16 —á–∞—Å–æ–≤ –∑–∞–≤—Ç—Ä–∞: " //TODO add a response with a proposal to send a weather forecast for another 12 hours

		iHour := om.GetTomorrowDateAndHour(dataWeather)

		for i := iHour; i < iHour+16; i++ {
			reply += fmt.Sprintf("\n\n%s %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %d%s, %s",
				dataWeather.Hourly.Time[i][11:16], dataWeather.Hourly.Temperature2M[i], dataWeather.Hourly.ApparentTemperature[i], dataWeather.Hourly.Cloudcover[i], percent,
				dataWeather.Hourly.Windspeed10M[i], dataWeather.Hourly.Relativehumidity2M[i], percent, getWeatherOMCondition(dataWeather.Hourly.Weathercode[i]))
		}
		if err != nil {
			fmt.Println(err)
		}

		return reply
	}

	if strings.Contains(message, " –Ω–∞ ") {
		message := strings.Fields(message)
		dataWeather, err := om.GetWeatherByHour(message[0])
		if err != nil {
			fmt.Println(err)
		}
		numberHours, err := strconv.Atoi(message[2])
		if err != nil {
			fmt.Println(err)
		}
		reply = fmt.Sprintf("–ü–æ–≥–æ–¥–∞ –Ω–∞ %d —á–∞—Å–æ–≤", numberHours)

		iHour := om.GetCurrentDateAndHour(dataWeather)

		for i := iHour; i < iHour+numberHours; i++ {
			reply += fmt.Sprintf("\n\n%s %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %d%s, %s",
				dataWeather.Hourly.Time[i][11:16], dataWeather.Hourly.Temperature2M[i], dataWeather.Hourly.ApparentTemperature[i], dataWeather.Hourly.Cloudcover[i], percent,
				dataWeather.Hourly.Windspeed10M[i], dataWeather.Hourly.Relativehumidity2M[i], percent, getWeatherOMCondition(dataWeather.Hourly.Weathercode[i]))
		}
		if err != nil {
			fmt.Println(err)
		}

		return reply
	}

	if strings.Contains(message, " –¥–Ω—è") || strings.Contains(message, " –¥–Ω–µ–π") ||
		strings.Contains(message, " –¥–µ–Ω—å") ||
		strings.Contains(message, "–Ω–µ–¥–µ–ª—è") || strings.Contains(message, "–Ω–µ–¥–µ–ª—é") {
		partMessage := strings.Fields(message)

		dataWeather, err := om.GetWeatherByDay(partMessage[0])
		if err != nil {
			fmt.Println(err)
		}

		var numDays int
		if strings.Contains(message, "–Ω–µ–¥–µ–ª—è") || strings.Contains(message, "–Ω–µ–¥–µ–ª—é") {
			reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é: "
			numDays = 7
		} else {
			if strings.Contains(message, " –¥–Ω—è") {
				reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + partMessage[1] + " –¥–Ω—è:"
			}
			if strings.Contains(message, " –¥–Ω–µ–π") {
				reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + partMessage[1] + " –¥–Ω–µ–π:"
			}
			if strings.Contains(message, " –¥–µ–Ω—å") {
				reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + partMessage[1] + " –¥–µ–Ω—å:"
			}

			numDays, err = strconv.Atoi(partMessage[1])
			if err != nil {
				fmt.Println(err)
			}
			if numDays > 7 {
				numDays = 7
			}
		}

		fmt.Println(dataWeather)
		days := map[string]string{
			"Monday":    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
			"Tuesday":   "–í—Ç–æ—Ä–Ω–∏–∫",
			"Wednesday": "–°—Ä–µ–¥–∞",
			"Thursday":  "–ß–µ—Ç–≤–µ—Ä–≥",
			"Friday":    "–ü—è—Ç–Ω–∏—Ü–∞",
			"Saturday":  "–°—É–±–±–æ—Ç–∞",
			"Sunday":    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
		}
		for i := 0; i < numDays; i++ {
			day := days[time.Now().AddDate(0, 0, i).Weekday().String()]

			reply += fmt.Sprintf("\n\n%s\n–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è: –æ—Ç %.1f¬∞ –¥–æ %.1f¬∞. –ü–æ –æ—â—É—â–µ–Ω–∏—è–º: –æ—Ç %.1f¬∞ –¥–æ %.1f¬∞"+
				"\n–°—É–º–º–∞ –æ—Å–∞–¥–∫–æ–≤: %.0f –º–º. –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å, %s",
				day, dataWeather.Daily.Temperature2MMin[i], dataWeather.Daily.Temperature2MMax[i],
				dataWeather.Daily.ApparentTemperatureMin[i], dataWeather.Daily.ApparentTemperatureMax[i],
				dataWeather.Daily.PrecipitationSum[i], dataWeather.Daily.Windspeed10MMax[i], getWeatherOMCondition(dataWeather.Daily.Weathercode[i]))
		}
		if err != nil {
			fmt.Println(err)
		}

		return reply
	}

	return "–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"
}

func getWeatherOMCondition(code int) string {
	condition := ""

	switch code {
	case 0:
		condition = "—è—Å–Ω–æüåû"
	case 1:
		condition = "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æüå§"
	case 2:
		condition = "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å‚òÅÔ∏è"
	case 3:
		condition = "–ø–∞—Å–º—É—Ä–Ω–æ‚òÅ"
	case 45:
		condition = "—Ç—É–º–∞–Ωüå´"
	case 48:
		condition = "–∏–Ω–µ–πüå´"
	case 51:
		condition = "–ª–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—åüåß"
	case 53:
		condition = "—É–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—åüåß"
	case 55:
		condition = "–º–æ—Ä–æ—Å—å –ø–ª–æ—Ç–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏üåß"
	case 56:
		condition = "—Å–ª–∞–±—ã–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—åüåß"
	case 57:
		condition = "–º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—åüåß"
	case 61:
		condition = "—Å–ª–∞–±—ã–π –¥–æ–∂–¥—åüåß"
	case 63:
		condition = "—Å—Ä–µ–¥–Ω–∏–π –¥–æ–∂–¥—åüåß"
	case 65:
		condition = "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—åüåß"
	case 66:
		condition = "—Å–ª–∞–±—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—åüåßü•∂"
	case 67:
		condition = "—Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—åüåßü•∂"
	case 71:
		condition = "—Å–ª–∞–±—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥üå®"
	case 73:
		condition = "—Å—Ä–µ–¥–Ω–∏–π —Å–Ω–µ–≥–æ–ø–∞–¥üå®"
	case 75:
		condition = "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥üå®"
	case 77:
		condition = "—Å–Ω–µ–∂–Ω—ã–µ —Ö–ª–æ–ø—å—è‚ùÑ"
	case 80:
		condition = "–Ω–µ –±–æ–ª—å—à–æ–π –ª–∏–≤–µ–Ω—åüåß"
	case 81:
		condition = "—Å—Ä–µ–¥–Ω–∏–π –ª–∏–≤–µ–Ω—åüåß"
	case 82:
		condition = "—Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—åüåß"
	case 85:
		condition = "–Ω–µ –±–æ–ª—å—à–æ–π —Å–Ω–µ–∂–Ω—ã–π –¥–æ–∂–¥—å‚ùÑüåß"
	case 86:
		condition = "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–∂–Ω—ã–π –¥–æ–∂–¥—å‚ùÑüåß"
	case 95:
		condition = "—Å–ª–∞–±–∞—è –≥—Ä–æ–∑–∞üå©"
	case 96:
		condition = "–≥—Ä–æ–∑–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –≥—Ä–∞–¥–æ–ºüå©üßä"
	case 99:
		condition = "–≥—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –≥—Ä–∞–¥–æ–ºüå©üßä"
	}

	return condition
}
