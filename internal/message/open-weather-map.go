package message

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/romanzh1/weather-averager/pkg/api/owm"
)

func getWeatherOWM(message string) string {
	percent := "%"
	reply := ""

	if strings.Contains(message, "—Å–µ–π—á–∞—Å") {
		locality := strings.Fields(message)
		dataWeather, err := owm.GetWeatherNow(locality[0]) // TODO make any order
		if err != nil {
			fmt.Println(err)
		}
		return fmt.Sprintf("–°–µ–π—á–∞—Å %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å, %s",
			dataWeather.Main.Temp, dataWeather.Main.FeelsLike, dataWeather.Main.Humidity, percent,
			dataWeather.Wind.Speed, getWeatherOWMCondition(dataWeather.Weather[0].Description)) //TODO change the sprintf to something else
	}

	if strings.Contains(message, "—Å–µ–≥–æ–¥–Ω—è") {
		message := strings.Fields(message)
		dataWeather, err := owm.GetWeatherByHour(message[0])
		if err != nil {
			fmt.Println(err)
		}

		reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ 12 —á–∞—Å–æ–≤: " //TODO add a response with a proposal to send a weather forecast for another 12 hours

		for i := 0; i < 12; i++ {
			reply += fmt.Sprintf("\n\n%s %.1f¬∞ –≥—Ä–∞–¥—É—Å–æ–≤, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s, %s",
				time.Unix(dataWeather.Hourly[i].Dt+10800, 0).Format("15:04"), dataWeather.Hourly[i].Temp, dataWeather.Hourly[i].FeelsLike, dataWeather.Hourly[i].Humidity,
				percent, dataWeather.Hourly[i].WindSpeed, dataWeather.Hourly[i].Pop*100, percent, getWeatherOWMCondition(dataWeather.Hourly[i].Weather[0].Description))
		}
		if err != nil {
			fmt.Println(err)
		}

		return reply
	}

	if strings.Contains(message, "–∑–∞–≤—Ç—Ä–∞") {
		message := strings.Fields(message)
		dataWeather, err := owm.GetWeatherByHour(message[0])
		if err != nil {
			fmt.Println(err)
		}
		reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ 16 —á–∞—Å–æ–≤ –∑–∞–≤—Ç—Ä–∞: " //TODO add a response with a proposal to send a weather forecast for another 12 hours

		tomorrow := time.Now().AddDate(0, 0, 1)
		var dateLayout = "02-01-2006"
		midnight, _ := time.Parse(dateLayout, tomorrow.Format(dateLayout))
		midnightUnix := midnight.Unix() // TODO make time zone

		var indTomor int
		for i := 0; i < 48; i++ {
			if dataWeather.Hourly[i].Dt == midnightUnix {
				indTomor = i
			}
		}

		for i := indTomor; i < indTomor+16; i++ {
			reply += fmt.Sprintf("\n\n%s %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s, %s",
				time.Unix(dataWeather.Hourly[i].Dt, 0).Format("15:04"), dataWeather.Hourly[i].Temp, dataWeather.Hourly[i].FeelsLike, dataWeather.Hourly[i].Humidity,
				percent, dataWeather.Hourly[i].WindSpeed, dataWeather.Hourly[i].Pop*100, percent, getWeatherOWMCondition(dataWeather.Hourly[i].Weather[0].Description))
		}
		if err != nil {
			fmt.Println(err)
		}

		return reply
	}

	if strings.Contains(message, " –Ω–∞ ") {
		message := strings.Fields(message)
		dataWeather, err := owm.GetWeatherByHour(message[0])
		if err != nil {
			fmt.Println(err)
		}
		numberHours, err := strconv.Atoi(message[2])
		if err != nil {
			fmt.Println(err)
		}
		reply = fmt.Sprintf("–ü–æ–≥–æ–¥–∞ –Ω–∞ %d —á–∞—Å–æ–≤", numberHours)

		for i := 0; i < numberHours; i++ {
			reply += fmt.Sprintf("\n\n%s %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s, %s",
				time.Unix(dataWeather.Hourly[i].Dt+10800, 0).Format("15:04"), dataWeather.Hourly[i].Temp, dataWeather.Hourly[i].FeelsLike, dataWeather.Hourly[i].Humidity,
				percent, dataWeather.Hourly[i].WindSpeed, dataWeather.Hourly[i].Pop*100, percent, getWeatherOWMCondition(dataWeather.Hourly[i].Weather[0].Description))
		}
		if err != nil {
			fmt.Println(err)
		}

		return reply
	}

	if strings.Contains(message, " –¥–Ω—è") || strings.Contains(message, " –¥–Ω–µ–π") ||
		strings.Contains(message, " –¥–µ–Ω—å") ||
		strings.Contains(message, "–Ω–µ–¥–µ–ª—è") || strings.Contains(message, "–Ω–µ–¥–µ–ª—é") {
		partMessage := strings.Fields(message)
		dataWeather, err := owm.GetWeatherByHour(partMessage[0])
		if err != nil {
			fmt.Println(err)
		}

		var numDays int
		if strings.Contains(message, "–Ω–µ–¥–µ–ª—è") || strings.Contains(message, "–Ω–µ–¥–µ–ª—é") {
			reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é: "
			numDays = len(dataWeather.Daily)
		} else {
			if strings.Contains(message, " –¥–Ω—è") {
				reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + partMessage[1] + " –¥–Ω—è:"
			}
			if strings.Contains(message, " –¥–Ω–µ–π") {
				reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + partMessage[1] + " –¥–Ω–µ–π:"
			}
			if strings.Contains(message, " –¥–µ–Ω—å") {
				reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + partMessage[1] + " –¥–µ–Ω—å:"
			}

			numDays, err = strconv.Atoi(partMessage[1])
			if err != nil {
				fmt.Println(err)
			}
			if numDays > 7 {
				numDays = 7
			}
		}

		days := [7]string{"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
		for i := 0; i < numDays; i++ {
			day := days[time.Unix(dataWeather.Daily[i].Dt, 0).Weekday()]

			reply += fmt.Sprintf("\n\n%s\n–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è: —É—Ç—Ä–æ–º %.1f¬∞, –¥–Ω—ë–º %.1f¬∞, –≤–µ—á–µ—Ä–æ–º %.1f¬∞, –Ω–æ—á—å—é %.1f¬∞"+
				"\n–ü–æ –æ—â—É—â–µ–Ω–∏—è–º: —É—Ç—Ä–æ–º %.1f¬∞, –¥–Ω—ë–º %.1f¬∞, –≤–µ—á–µ—Ä–æ–º %.1f¬∞, –Ω–æ—á—å—é %.1f¬∞."+
				"\n–í–ª–∞–∂–Ω–æ—Å—Ç—å %d%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s, %s",
				day, dataWeather.Daily[i].Temp.Morn, dataWeather.Daily[i].Temp.Day, dataWeather.Daily[i].Temp.Eve, dataWeather.Daily[i].Temp.Night,
				dataWeather.Daily[i].FeelsLike.Morn, dataWeather.Daily[i].FeelsLike.Day, dataWeather.Daily[i].FeelsLike.Eve, dataWeather.Daily[i].FeelsLike.Night, dataWeather.Daily[i].Humidity,
				percent, dataWeather.Daily[i].WindSpeed, dataWeather.Daily[i].Pop*100, percent, getWeatherOWMCondition(dataWeather.Daily[i].Weather[0].Description))
		}
		if err != nil {
			fmt.Println(err)
		}

		return reply
	}

	return "–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"
}

func getWeatherOWMCondition(condition string) string {
	conditionWithEmoji := ""

	switch condition {
	case "clear sky":
		conditionWithEmoji = "—è—Å–Ω–æüåû"
	case "few clouds":
		conditionWithEmoji = "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æüå§"
	case "scattered clouds":
		conditionWithEmoji = "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å‚òÅÔ∏è"
	case "broken clouds":
		conditionWithEmoji = "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏‚õÖ"
	case "overcast clouds":
		conditionWithEmoji = "–ø–∞—Å–º—É—Ä–Ω–æ‚òÅ"
	case "shower rain":
		conditionWithEmoji = "–ª–∏–≤–µ–Ω—åüåß"
	case "light rain":
		conditionWithEmoji = "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—åüåß"
	case "moderate rain":
		conditionWithEmoji = "—Å—Ä–µ–¥–Ω–∏–π –¥–æ–∂–¥—åüåß"
	case "rain":
		conditionWithEmoji = "–¥–æ–∂–¥—åüåß"
	case "thunderstorm":
		conditionWithEmoji = "–≥—Ä–æ–∑–∞‚õà"
	case "snow":
		conditionWithEmoji = "—Å–Ω–µ–≥üå®"
	case "mist":
		conditionWithEmoji = "—Ç—É–º–∞–Ωüå´"
	default:
		conditionWithEmoji = "‚õÖ" // TODO add condition cases
	}

	return conditionWithEmoji
}
