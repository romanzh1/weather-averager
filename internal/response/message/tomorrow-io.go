package message

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/romanzh1/weather-averager/pkg/api/tom"
)

func GetWeatherTOM(message string) string {
	percent := "%"
	reply := ""

	if strings.Contains(message, "—Å–µ–π—á–∞—Å") {
		locality := strings.Fields(message)
		dataWeather, err := tom.GetWeatherNow(locality[0]) // TODO make any order
		if err != nil {
			fmt.Println(err)
		}
		return fmt.Sprintf("–°–µ–π—á–∞—Å %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %.0f%s\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s, %s",
			dataWeather.Data.Timelines[0].Intervals[0].Values.Temperature, dataWeather.Data.Timelines[0].Intervals[0].Values.TemperatureApparent,
			dataWeather.Data.Timelines[0].Intervals[0].Values.CloudCover, percent, dataWeather.Data.Timelines[0].Intervals[0].Values.WindSpeed,
			dataWeather.Data.Timelines[0].Intervals[0].Values.Humidity, percent, getWeatherTOMCondition(dataWeather.Data.Timelines[0].Intervals[0].Values.WeatherCode)) //TODO change the sprintf to something else
	}

	if strings.Contains(message, "—Å–µ–≥–æ–¥–Ω—è") {
		message := strings.Fields(message)
		dataWeather, err := tom.GetWeatherByHour(message[0], 12)
		if err != nil {
			fmt.Println(err)
		}

		reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ 12 —á–∞—Å–æ–≤: " //TODO add a response with a proposal to send a weather forecast for another 12 hours

		for i := 0; i < 12; i++ {
			reply += fmt.Sprintf("\n\n%s %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %.0f%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s, %s",
				dataWeather.Data.Timelines[0].Intervals[i].StartTime.String()[11:16], dataWeather.Data.Timelines[0].Intervals[i].Values.Temperature, dataWeather.Data.Timelines[0].Intervals[i].Values.TemperatureApparent,
				dataWeather.Data.Timelines[0].Intervals[i].Values.CloudCover, percent, dataWeather.Data.Timelines[0].Intervals[i].Values.WindSpeed,
				dataWeather.Data.Timelines[0].Intervals[i].Values.Humidity, percent, getWeatherTOMCondition(dataWeather.Data.Timelines[0].Intervals[i].Values.WeatherCode))
		}
		if err != nil {
			fmt.Println(err)
		}

		return reply
	}

	if strings.Contains(message, "–∑–∞–≤—Ç—Ä–∞") {
		message := strings.Fields(message)
		dataWeather, err := tom.GetWeatherByHour(message[0], 41) // TODO calculate the number of hours
		if err != nil {
			fmt.Println(err)
		}
		reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ 16 —á–∞—Å–æ–≤ –∑–∞–≤—Ç—Ä–∞: " //TODO add a response with a proposal to send a weather forecast for another 12 hours

		iHour := tom.GetTomorrowDateAndHour(dataWeather)

		for i := iHour; i < iHour+16; i++ {
			reply += fmt.Sprintf("\n\n%s %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %.0f%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s, %s",
				dataWeather.Data.Timelines[0].Intervals[i].StartTime.String()[11:16], dataWeather.Data.Timelines[0].Intervals[i].Values.Temperature, dataWeather.Data.Timelines[0].Intervals[i].Values.TemperatureApparent,
				dataWeather.Data.Timelines[0].Intervals[i].Values.CloudCover, percent, dataWeather.Data.Timelines[0].Intervals[i].Values.WindSpeed,
				dataWeather.Data.Timelines[0].Intervals[i].Values.Humidity, percent, getWeatherTOMCondition(dataWeather.Data.Timelines[0].Intervals[i].Values.WeatherCode))
		}
		if err != nil {
			fmt.Println(err)
		}

		return reply
	}

	if strings.Contains(message, " –Ω–∞ ") {
		message := strings.Fields(message)

		numberHours, err := strconv.Atoi(message[2])
		if err != nil {
			fmt.Println(err)
		}
		dataWeather, err := tom.GetWeatherByHour(message[0], numberHours)
		if err != nil {
			fmt.Println(err)
		}

		reply = fmt.Sprintf("–ü–æ–≥–æ–¥–∞ –Ω–∞ %d —á–∞—Å–æ–≤", numberHours)

		for i := 0; i < numberHours; i++ {
			reply += fmt.Sprintf("\n\n%s %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %.0f%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s, %s",
				dataWeather.Data.Timelines[0].Intervals[i].StartTime.String()[11:16], dataWeather.Data.Timelines[0].Intervals[i].Values.Temperature, dataWeather.Data.Timelines[0].Intervals[i].Values.TemperatureApparent,
				dataWeather.Data.Timelines[0].Intervals[i].Values.CloudCover, percent, dataWeather.Data.Timelines[0].Intervals[i].Values.WindSpeed,
				dataWeather.Data.Timelines[0].Intervals[i].Values.Humidity, percent, getWeatherTOMCondition(dataWeather.Data.Timelines[0].Intervals[i].Values.WeatherCode))
		}
		if err != nil {
			fmt.Println(err)
		}

		return reply
	}

	if strings.Contains(message, " –¥–Ω—è") || strings.Contains(message, " –¥–Ω–µ–π") ||
		strings.Contains(message, " –¥–µ–Ω—å") ||
		strings.Contains(message, "–Ω–µ–¥–µ–ª—è") || strings.Contains(message, "–Ω–µ–¥–µ–ª—é") {
		partMessage := strings.Fields(message)

		var numDays int
		if strings.Contains(message, "–Ω–µ–¥–µ–ª—è") || strings.Contains(message, "–Ω–µ–¥–µ–ª—é") {
			reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é: "
			numDays = 7
		} else {
			if strings.Contains(message, " –¥–Ω—è") {
				reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + partMessage[1] + " –¥–Ω—è:"
			}
			if strings.Contains(message, " –¥–Ω–µ–π") {
				reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + partMessage[1] + " –¥–Ω–µ–π:"
			}
			if strings.Contains(message, " –¥–µ–Ω—å") {
				reply = "–ü–æ–≥–æ–¥–∞ –Ω–∞ " + partMessage[1] + " –¥–µ–Ω—å:"
			}

			num, err := strconv.Atoi(partMessage[1])
			if err != nil {
				fmt.Println(err)
			}
			numDays = num

			if numDays > 7 {
				numDays = 7
			}

		}

		dataWeather, err := tom.GetWeatherByDay(partMessage[0], numDays)
		if err != nil {
			fmt.Println(err)
		}

		days := map[string]string{
			"Monday":    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
			"Tuesday":   "–í—Ç–æ—Ä–Ω–∏–∫",
			"Wednesday": "–°—Ä–µ–¥–∞",
			"Thursday":  "–ß–µ—Ç–≤–µ—Ä–≥",
			"Friday":    "–ü—è—Ç–Ω–∏—Ü–∞",
			"Saturday":  "–°—É–±–±–æ—Ç–∞",
			"Sunday":    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
		}
		for i := 0; i < numDays; i++ {
			day := days[time.Now().AddDate(0, 0, i).Weekday().String()]

			reply += fmt.Sprintf("\n\n%s\n–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ %.1f¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞. –í–ª–∞–∂–Ω–æ—Å—Ç—å %.0f%s.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ %.1f –º/—Å. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ %.0f%s, %s",
				day, dataWeather.Data.Timelines[0].Intervals[i].Values.Temperature, dataWeather.Data.Timelines[0].Intervals[i].Values.TemperatureApparent,
				dataWeather.Data.Timelines[0].Intervals[i].Values.CloudCover, percent, dataWeather.Data.Timelines[0].Intervals[i].Values.WindSpeed,
				dataWeather.Data.Timelines[0].Intervals[i].Values.Humidity, percent, getWeatherTOMCondition(dataWeather.Data.Timelines[0].Intervals[i].Values.WeatherCode))
		}
		if err != nil {
			fmt.Println(err)
		}

		return reply
	}

	return invalidRequest
}

func getWeatherTOMCondition(code int) string { // TODO add condition cases
	condition := ""
	flag := true

	switch flag {
	case code == 1000:
		condition = "—è—Å–Ω–æüåû"
	case code == 1100:
		condition = "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æüå§"
	case code == 1101 || code == 1102:
		condition = "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å‚òÅÔ∏è"
	case code == 1001:
		condition = "–æ–±–ª–∞—á–Ω–æ‚òÅ"
	case code == 2000 || code == 2100:
		condition = "—Ç—É–º–∞–Ωüå´"
	case code == 4000:
		condition = "–∏–Ω–µ–πüå´"
	case code == 4200:
		condition = "—Å–ª–∞–±—ã–π –¥–æ–∂–¥—åüåß"
	case code == 4001:
		condition = "–¥–æ–∂–¥—åüåß"
	case code == 4201:
		condition = "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—åüåß"
	case code == 6200:
		condition = "–ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—åüåßü•∂"
	case code == 6201:
		condition = "—Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—åüåßü•∂"
	case code == 5100:
		condition = "—Å–ª–∞–±—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥üå®"
	case code == 5000:
		condition = "—Å–Ω–µ–≥–æ–ø–∞–¥üå®"
	case code == 5101:
		condition = "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥üå®"
	case code == 8000:
		condition = "–≥—Ä–æ–∑–∞üå©"
	case code == 7102 || code == 7000:
		condition = "–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–ºüå©üßä"
	case code == 7101:
		condition = "–≥—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –≥—Ä–∞–¥–æ–ºüå©üßä"
	default:
		condition = "üå§"
	}

	return condition
}
